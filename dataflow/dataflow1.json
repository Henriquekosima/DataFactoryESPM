{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ingestionData",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Dim_Tempo",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "MapDrifted2",
					"description": "Cria um mapeamento explÃ­cito para cada coluna em descompasso"
				},
				{
					"name": "select1"
				},
				{
					"name": "DimTempoID"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cd_agencia as integer,",
				"          Nm_Agencia as string,",
				"          cd_banco as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 derive(Dt_Entrega = toString(byName('Dt_Entrega')),",
				"          Dt_Inicio = toString(byName('Dt_Inicio')),",
				"          Dt_Locacao = toString(byName('Dt_Locacao')),",
				"          Dt_Pagto = toString(byName('Dt_Pagto')),",
				"          Dt_Retirada = toString(byName('Dt_Retirada')),",
				"          Qt_Dias = toString(byName('Qt_Dias'))) ~> MapDrifted2",
				"MapDrifted2 select(mapColumn(",
				"          Dt_Entrega,",
				"          Dt_Inicio,",
				"          Dt_Locacao,",
				"          Dt_Pagto,",
				"          Dt_Retirada,",
				"          Qt_Dias",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(DimTempoID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> DimTempoID",
				"DimTempoID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['dim_tempo'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}