{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ingestionData",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Dim_Tempo",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "MapDrifted2",
					"description": "Cria um mapeamento explÃ­cito para cada coluna em descompasso"
				},
				{
					"name": "select1"
				},
				{
					"name": "DimTempoID"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cd_agencia as integer,",
				"          Nm_Agencia as string,",
				"          cd_banco as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 derive(Cd_Age_Bco = toString(byName('Cd_Age_Bco')),",
				"          Cd_Agencia = toString(byName('Cd_Agencia')),",
				"          Cd_Cargo = toString(byName('Cd_Cargo')),",
				"          Cd_Cidade = toString(byName('Cd_Cidade')),",
				"          Cd_Cliente = toString(byName('Cd_Cliente')),",
				"          Cd_Depto = toString(byName('Cd_Depto')),",
				"          Cd_Estado = toString(byName('Cd_Estado')),",
				"          Cd_Func = toString(byName('Cd_Func')),",
				"          Cd_Gerente = toString(byName('Cd_Gerente')),",
				"          Cd_Proprietario = toString(byName('Cd_Proprietario')),",
				"          Cd_Tp_Cliente = toString(byName('Cd_Tp_Cliente')),",
				"          Cd_cliente = toString(byName('Cd_cliente')),",
				"          Desc_Cor = toString(byName('Desc_Cor')),",
				"          Dt_Entrega = toString(byName('Dt_Entrega')),",
				"          Dt_Inicio = toString(byName('Dt_Inicio')),",
				"          Dt_Locacao = toString(byName('Dt_Locacao')),",
				"          Dt_Pagto = toString(byName('Dt_Pagto')),",
				"          Dt_Retirada = toString(byName('Dt_Retirada')),",
				"          Km_Atual = toString(byName('Km_Atual')),",
				"          Nm_Banco = toString(byName('Nm_Banco')),",
				"          Nm_Cargo = toString(byName('Nm_Cargo')),",
				"          Nm_Cidade = toString(byName('Nm_Cidade')),",
				"          Nm_Cliente = toString(byName('Nm_Cliente')),",
				"          Nm_Depto = toString(byName('Nm_Depto')),",
				"          Nm_Estado = toString(byName('Nm_Estado')),",
				"          Nm_Fabricante = toString(byName('Nm_Fabricante')),",
				"          Nm_Fone_Cliente = toString(byName('Nm_Fone_Cliente')),",
				"          Nm_Func = toString(byName('Nm_Func')),",
				"          Nm_Grupo = toString(byName('Nm_Grupo')),",
				"          Nm_Modelo = toString(byName('Nm_Modelo')),",
				"          Nm_Operadora = toString(byName('Nm_Operadora')),",
				"          Nm_Proprietario = toString(byName('Nm_Proprietario')),",
				"          Nm_Tp_Automovel = toString(byName('Nm_Tp_Automovel')),",
				"          Nm_Tp_Cliente = toString(byName('Nm_Tp_Cliente')),",
				"          Nm_Tp_Combustivelcol = toString(byName('Nm_Tp_Combustivelcol')),",
				"          Nr_CPF = toString(byName('Nr_CPF')),",
				"          Nr_Chassis = toString(byName('Nr_Chassis')),",
				"          Nr_Estrelas = toString(byName('Nr_Estrelas')),",
				"          Nr_Habilitacao = toString(byName('Nr_Habilitacao')),",
				"          Nr_Pedido = toString(byName('Nr_Pedido')),",
				"          Nr_Placa = toString(byName('Nr_Placa')),",
				"          Qt_Dias = toString(byName('Qt_Dias')),",
				"          Sigla_Estado = toString(byName('Sigla_Estado')),",
				"          Status = toString(byName('Status')),",
				"          Tp_Automovel = toString(byName('Tp_Automovel')),",
				"          Tp_Combustivel = toString(byName('Tp_Combustivel')),",
				"          Vl_Diaria = toString(byName('Vl_Diaria')),",
				"          Vl_Diaria_Calc = toString(byName('Vl_Diaria_Calc')),",
				"          Vl_Orc_Depto = toString(byName('Vl_Orc_Depto')),",
				"          Vl_Perc_Comissao = toString(byName('Vl_Perc_Comissao')),",
				"          Vl_Salario = toString(byName('Vl_Salario')),",
				"          Vl_Total = toString(byName('Vl_Total')),",
				"          cd_Agencia = toString(byName('cd_Agencia')),",
				"          cd_Banco = toString(byName('cd_Banco')),",
				"          cd_Cidade = toString(byName('cd_Cidade')),",
				"          cd_Cliente = toString(byName('cd_Cliente')),",
				"          cd_Cor = toString(byName('cd_Cor')),",
				"          cd_Fabricante = toString(byName('cd_Fabricante')),",
				"          cd_Fone_Cliente = toString(byName('cd_Fone_Cliente')),",
				"          cd_Grupo = toString(byName('cd_Grupo')),",
				"          cd_Modelo = toString(byName('cd_Modelo')),",
				"          cd_Operadora = toString(byName('cd_Operadora')),",
				"          cd_Tp_Automovel = toString(byName('cd_Tp_Automovel')),",
				"          cd_Tp_Cliente = toString(byName('cd_Tp_Cliente')),",
				"          cd_Tp_Combustivel = toString(byName('cd_Tp_Combustivel')),",
				"          cd_cor = toString(byName('cd_cor')),",
				"          cd_grupo = toString(byName('cd_grupo')),",
				"          cd_proprietario = toString(byName('cd_proprietario')),",
				"          url = toString(byName('url'))) ~> MapDrifted2",
				"filter1 select(mapColumn(",
				"          Dt_Entrega,",
				"          Dt_Inicio,",
				"          Dt_Locacao,",
				"          Dt_Pagto,",
				"          Dt_Retirada,",
				"          Qt_Dias",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(DimTempoID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L,",
				"     partitionBy('hash', 1)) ~> DimTempoID",
				"MapDrifted2 filter(contains(array(toString(columns())),!isNull(#item))) ~> filter1",
				"DimTempoID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['dim_tempo'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}